define( [ "qlik", "jquery", "util", "./enigma", "autogenerated/qix/engine-api", "text!./leonardo/leonardo-ui.min.css", "text!./style.css", "./jquery-ui-1.12.1.custom/jquery-ui.min", "text!./jquery-ui-1.12.1.custom/jquery-ui.min.css"],
function ( qlik, $, Util, enigma, schema, leoCSS, myCSS, jqueryUI, jqueryUICSS) {
	$("<style>").html(leoCSS).appendTo("head");
	$("<style>").html(myCSS).appendTo("head");
	$("<style>").html(jqueryUICSS).appendTo("head");

	return {
		support : {
			snapshot: false,
			export: false,
			exportData : false
		},
		paint: function ($element) {
      		var self = this;
			var html;
			var buttonSelections;
			var debug = false;
			buttonSelections = "<div class='lui-text-default' id='grouperTextSel'>Create a new master item to group currently selected values from a single field.</div>";
			buttonSelections += "<div><button class='lui-button' id='addSelDim'>";
			buttonSelections += "<span class='lui-button__icon  lui-icon  lui-icon--plus'></span><span class='lui-button__text'>add master dimension</span>";
			buttonSelections += "</button></div>";
			buttonSelections += "<div class='lui-text-default' id='grouperTextNew'>Create a new master item to group values from a single field.</div>";
			buttonSelections += "<div id='grouperBtnNew'><button class='lui-button' id='addNewDim'>";
			buttonSelections += "<span class='lui-button__icon  lui-icon  lui-icon--plus'></span><span class='lui-button__text'>add master dimension</span>";
			buttonSelections += "</button></div>";
			buttonSelections += "<div class='lui-text-default' id='grouperTextBin'>Create a new master item to group values into bins.</div>";
			buttonSelections += "<div id='grouperBtnBin'><button class='lui-button' id='addNewBin'>";
			buttonSelections += "<span class='lui-button__icon  lui-icon  lui-icon--plus'></span><span class='lui-button__text'>add master dimension</span>";
			buttonSelections += "</button></div>";
			// buttonSelections += "<div class='lui-text-default' id='grouperTextMsr'>Create a new master item to group numerical values by an expression. </div>";
			// buttonSelections += "<button class='lui-button' id='addMsr'>";
			// buttonSelections += "<span class='lui-button__icon  lui-icon  lui-icon--plus'></span><span class='lui-button__text'>add master measure</span>";
			// buttonSelections += "</button>";
			buttonSelections +=  "<label class='lui-label'>New Group Name</label><input id='dimName' class='lui-input' size='20' value='Filtered Group'/>";
			html = buttonSelections;

			$element.html( html );
			
			var nameChanged = false;
			$("#dimName").change(function(){
				nameChanged = true;
				console.log("name changed");
			})

			// Enigma v2
			var secure = !Util.isSecure ? 'ws' : 'wss';
			var appId = Util.reloadURI.substring(Util.reloadURI.indexOf('app/')+4, (Util.reloadURI.indexOf('/sheet') > -1 ? Util.reloadURI.indexOf('/sheet') : Util.reloadURI.length));
			var port = Util.port ? ':' + Util.port : '';
			if(debug) console.log(appId);
			var urlConfig = {
				host: Util.hostname,
				port: port,
				appId: appId,
				secure: secure
			}
			if(debug) console.log(Util);
			var cfg = {
				schema, 
				url: urlConfig.secure + '://' + urlConfig.host + urlConfig.port + '/app/' + urlConfig.appId
			};
			if(debug) console.log('config',cfg);

			$(function() {
		    	var selections = [];
		    	var selSession;
				const session = enigma.create(cfg);
				session.open().then((global) => {
					global.getActiveDoc().then((doc) => {
						if(debug) console.log("Connected to QIX");
						doc.createSessionObject({
							"qInfo": {
								"qId": "",
								"qType": "SessionLists"
							},
							"qSelectionObjectDef": {
								qSelectionThreshold: 10
							}
						})
						.then((sessionObject) => {
							selSession = sessionObject;
							sessionObject.getLayout()
						    .then((layout) => {
						    	if(debug) console.log(JSON.stringify(layout, null, '  '));
						    	if(debug) console.log(JSON.stringify(layout.qSelectionObject.qSelections, null, '  '));
								
								if(layout.qSelectionObject.qSelections.length != 1){
									$("#addSelDim").prop('disabled',true);
									$('#grouperTextSel').html("Create a new master item to group currently selected values from a <I>single field</I>.")
								}else{
									$("#addSelDim").prop('disabled',false);
									var name = layout.qSelectionObject.qSelections[0].hasOwnProperty('qReadableName') ? layout.qSelectionObject.qSelections[0].qReadableName : layout.qSelectionObject.qSelections[0].qField;
									$("#dimName").val("Filtered " + name);
								}
								selSession.on('changed', () => {
						    		selSession.getLayout().then(layout => {
							    	if(debug) console.log(JSON.stringify(layout.qSelectionObject.qSelections, null, '  '));
									if(layout.qSelectionObject.qSelections.length != 1){
										$("#addSelDim").prop('disabled',true);
										$('#grouperTextSel').html("Create a new master item to group currently selected values from a <I>single field</I>.")
									}else{
										$("#addSelDim").prop('disabled',false);
										$('#grouperTextSel').html("Create a new master item to group currently selected values from a single field.");

										if(!nameChanged){
											var name = layout.qSelectionObject.qSelections[0].hasOwnProperty('qReadableName') ? layout.qSelectionObject.qSelections[0].qReadableName : layout.qSelectionObject.qSelections[0].qField;
											$("#dimName").val("Filtered " + name);
										}
									}
						    		});
						    	});

							});
						});
					});
				});
			});

			$("#addSelDim").click(function(){
				if(debug) console.log("add master dimension group based on selections");
		    	var selections = [];
				const session = enigma.create(cfg);
				session.open().then((global) => {
					global.getActiveDoc().then((doc) => {
						if(debug) console.log("Connected to QIX");
						doc.createSessionObject({
							"qInfo": {
								"qId": "",
								"qType": "SessionLists"
							},
							"qSelectionObjectDef": {
								qSelectionThreshold: 1000
							}
						})
						.then((sessionObject) => sessionObject.getLayout())
					    .then((layout) => {
					    	if(debug) console.log(JSON.stringify(layout, null, '  '))
					    	if(debug) console.log(JSON.stringify(layout.qSelectionObject.qSelections, null, '  '))
							
							if(layout.qSelectionObject.qSelections.length != 1){
								return Promise.reject("Please have exactly one field with selections");
							}

					    	doc.createObject({
							  qInfo: {
							    qType: 'my-list-object',
							  },
							  qListObjectDef: {
							    qDef: {
							      qFieldDefs: [layout.qSelectionObject.qSelections[0].qField],
							      "qSortCriterias": [
						            {
						              "qSortByState": 1,
						              "qSortByFrequency": 0,
						              "qSortByNumeric": 0,
						              "qSortByAscii": 1,
						              "qSortByLoadOrder": 0,
						              "qSortByExpression": 0,
						              "qExpression": {
						                "qv": ""
						              }
						            }
						          ]
							    },
							    // qShowAlternatives: false,
							    qInitialDataFetch: [{
							      qTop: 0,
							      qHeight: 5000,
							      qLeft: 0,
							      qWidth: 1,
							    }],
							  },
							})
							.then((listObject) => {
								mListObject = listObject;
								listObject.getLayout()
								.then((layout) => {
							        if(debug) console.log('Selected object info:', JSON.stringify(layout, null, '  '));
							        if(debug) console.log('Selected object info:', JSON.stringify(layout.qInfo, null, '  '));
							        if(debug) console.log('Selected object state:', JSON.stringify(layout.qListObject.qDimensionInfo.qStateCounts, null, '  '));
							        if(debug) console.log('Selected object data:', JSON.stringify(layout.qListObject.qDataPages[0].qMatrix, null, '  '));

						    		sField = {};
						    		sField['name'] = layout.qListObject.qDimensionInfo.qFallbackTitle;
						    		sField['vals'] = [];
									layout.qListObject.qDataPages[0].qMatrix.forEach( function ( row ) {
										if(row[0].qState == 'S')
											sField['vals'].push(row[0].qText);
									} );

							    	if(debug) console.log("sField",sField);

									var dimDef = {
								      "qInfo": {
								        "qType": "dimension"
								      },
								      "qDim": {
								        "title": "",
								        "qGrouping": "N",
								        "qFieldDefs": [],
								        "qFieldLabels": []
								      },
								      "qMetaDef": {
								        "title": "",
								        "description": "",
								        "tags": []
								      }
								    };
							    	var ifStmt = "=";
							    	var ctr = 0;
								    for(i=0; i<sField.vals.length;i++){
								    	ifStmt += "if(\"" + sField.name + "\" = '" + sField.vals[i] + "', '" + sField.vals[i] + "'";
								    	if(i<sField.vals.length-1){
								    		ifStmt += ",\n";
								    	}
								    	ctr++;
									}
								    for(k=0; k<ctr; k++)
								    	ifStmt += ")";

							    	dimDef.qDim.qFieldDefs.push(ifStmt);
							    	dimDef.qDim.qFieldLabels.push($("#dimName").val());
							    	dimDef.qDim.title = $("#dimName").val();
							    	dimDef.qMetaDef.title = $("#dimName").val();

							    	if(debug) console.log("dimDef",dimDef);

									doc.createDimension(dimDef)
								    .then(result => {
								    	if(debug) console.log(result);
								    	if(result.delta){
								    		$("#grouperTextSel").children().slice(2).remove();

											var msg = "Your new master dimension (" + $("#dimName").val() + ") has been added";
											var toast = "<div class='lui-toast' id='grouperToast'><span>" + msg + "</span></div>"
											$("#grouperTextSel").append(toast);
											$("#grouperToast").fadeOut(4000);
											setTimeout(function(){$("#grouperToast").remove();},4000);
											session.close();
								    	}
								    });

								});
							});
					    })
						.then(function(error){ 
							// not called 
						}, function(error){
							if(debug) console.log(error);
							var toast = "<div class='lui-toast' id='grouperToast'><span>" + error + "</span></div>"
							$("#grouperTextSel").append(toast);
							$("#grouperToast").fadeOut(4000);
							setTimeout(function(){$("#grouperToast").remove();},4000);
						})
					})
				}).catch(function(err) {
					if(debug) console.log('Something went wrong', err);
				});
			});

			$("#addNewDim").click(function(){
				if(debug) console.log("add master dimension group based on new field selection");
		    	var fields = [];
		    	var mListObject;
				const session = enigma.create(cfg);
				session.open().then((global) => {
					global.getActiveDoc().then((doc) => {
						if(debug) console.log("Connected to QIX");
						doc.createObject({
							qInfo: {
								qType: 'my-field-list',
							},
								qFieldListDef: {},
						})
			          	.then(object => object.getLayout())
			          	.then(layout => {
			          		if(debug) console.log('Field list:', JSON.stringify(layout, null, '  '));
			          		var list = "<select class='lui-select' id='grouperNewDimField'>";
			          		list += "<option selected disabled>Select the field to filter on</option>";
			          		layout.qFieldList.qItems.forEach( function ( row ) {
			          			list += "<option value='" + row.qName + "'>" + row.qName + "</option>";
			          		});
			          		list += "</select>";
			          		$("#grouperBtnNew").append(list);

			          		$("#grouperNewDimField").change(function(){
			          			var val = $("#grouperNewDimField option:selected").val();
			          			if(debug) console.log('grouper field selected',val);

								doc.createObject({
								  qInfo: {
								    qType: 'my-list-object',
								  },
								  qListObjectDef: {
								    qDef: {
								      qFieldDefs: [val],
								      "qSortCriterias": [
							            {
							              "qSortByState": 1,
							              "qSortByFrequency": 0,
							              "qSortByNumeric": 0,
							              "qSortByAscii": 1,
							              "qSortByLoadOrder": 0,
							              "qSortByExpression": 0,
							              "qExpression": {
							                "qv": ""
							              }
							            }
							          ]
								    },
								    qShowAlternatives: true,
								    qInitialDataFetch: [{
								      qTop: 0,
								      qHeight: 1000,
								      qLeft: 0,
								      qWidth: 1,
								    }],
								  },
								})
								.then((listObject) => {
									mListObject = listObject;
									listObject.getLayout()
									.then((layout) => {
								        if(debug) console.log('Generic object info:', JSON.stringify(layout.qInfo, null, '  '));
								        if(debug) console.log('List object state:', JSON.stringify(layout.qListObject.qDimensionInfo.qStateCounts, null, '  '));
								        if(debug) console.log('List object data:', JSON.stringify(layout.qListObject.qDataPages[0].qMatrix, null, '  '));

						          		var listbox = "<div id='grouperFieldValues' style='overflow: auto'>";
						          		listbox += "<ol id='grouperSelect'>";
										layout.qListObject.qDataPages[0].qMatrix.forEach( function ( row ) {
											listbox += '<li class="data state' + row[0].qState + ' ui-widget-content" data-value="' + row[0].qElemNumber + '">' + row[0].qText;
											listbox += '</li>';
										} );
										listbox += "</ol></div>";
										listbox += "<button class='lui-button' id='createNewDim'>";
										listbox += "<span class='lui-button__icon  lui-icon  lui-icon--plus'></span><span class='lui-button__text'>create master dimension</span>";
										listbox += "</button>";
						          		if($("#grouperFieldValues").length)
						          			$("#grouperFieldValues").replaceWith(listbox);
						          		else
						          			$("#grouperBtnNew").append(listbox);

									    $( "#grouperSelect" ).selectable({

									    	unselected: function(e, ui){
									    		if(debug) console.log(ui.unselected);
									    		$(ui.unselected).children('span').remove();
									    	},
									    	selected: function(e, ui){
									    		if(!$(ui.selected).children("span").length)
									    			$(ui.selected).append("<span class='lui-icon lui-icon--tick'></span>");
									    	}
									    });

									    mListObject.on('changed', () => {
									    	mListObject.getLayout().then(layout => {
									    		if(debug) console.log("changed mListObject", JSON.stringify(layout, null, '  '));

												layout.qListObject.qDataPages[0].qMatrix.forEach( function ( row ) {
													if(debug) console.log($("#grouperSelect li").filter(function() { return this.innerHTML === row[0].qText; }));
										    		// $("#grouperSelect li").filter(function() { return this.innerHTML === row[0].qText; })
										    		$("li").filter(function() { return this.innerText === row[0].qText; })
														.removeClass("stateO stateA stateS stateX stateXS")
														.addClass("state"+row[0].qState);
												});
									    	});
									    });

						          		$("#createNewDim").click(function(){
								    		sField = {};
								    		sField['name'] = $("#grouperNewDimField").find(":selected").text();
								    		sField['vals'] = [];
									        $("#grouperSelect .ui-selected").each(function() {
								    			sField['vals'].push($(this).text());
									        });
									        if(debug) console.log(JSON.stringify(sField, null, '  '));
									        if(debug) console.log("# sels", sField.vals.length);

											if(sField.vals.length == 0){
												if(debug) console.log("NO SELECTIONS");
												var error = "Please select at least one value";
												var toast = "<div class='lui-toast' id='grouperToast'><span>" + error + "</span></div>"
												$("#grouperTextNew").append(toast);
												$("#grouperToast").fadeOut(4000);
												setTimeout(function(){$("#grouperToast").remove();},4000);
												return;
											}

											var dimDef = {
										      "qInfo": {
										        "qType": "dimension"
										      },
										      "qDim": {
										        "title": "",
										        "qGrouping": "N",
										        "qFieldDefs": [],
										        "qFieldLabels": []
										      },
										      "qMetaDef": {
										        "title": "",
										        "description": "",
										        "tags": []
										      }
										    };
									    	var ifStmt = "=";
									    	var ctr = 0;
										    for(j=0; j<sField.vals.length;j++){
										    	ifStmt += "if(\"" + sField.name + "\" = '" + sField.vals[j] + "', '" + sField.vals[j] + "'";
										    	if(j<sField.vals.length-1){
										    		ifStmt += ",\n";
										    	}
										    	ctr++;
										    }
										    for(k=0; k<ctr; k++)
										    	ifStmt += ")";

									    	dimDef.qDim.qFieldDefs.push(ifStmt);
									    	dimDef.qDim.qFieldLabels.push($("#dimName").val());
									    	dimDef.qDim.title = $("#dimName").val();
									    	dimDef.qMetaDef.title = $("#dimName").val();

									    	if(debug) console.log("dimDef",dimDef);

											doc.createDimension(dimDef)
										    .then(result => {
										    	if(debug) console.log(result);
										    	if(result.delta){
										    		$("#grouperBtnNew").children().slice(1).remove();

													var msg = "Your new master dimension (" + $("#dimName").val() + ") has been added";
													var toast = "<div class='lui-toast' id='grouperToast'><span>" + msg + "</span></div>"
													$("#grouperTextNew").append(toast);
													$("#grouperToast").fadeOut(4000);
													setTimeout(function(){$("#grouperToast").remove();},4000);
													session.close();
										    	}
										    });
						          		})

								    })
								})
			          		});
			          	})
					})
				}).catch(function(err) {
					console.log('Something went wrong', err);
				});
			});

			$("#addNewBin").click(function(){
				if(debug) console.log("add master dimension based on bins");
				const session = enigma.create(cfg);
				session.open().then((global) => {
					global.getActiveDoc().then((doc) => {
						if(debug) console.log("Connected to QIX");
						doc.createObject({
							qInfo: {
								qType: 'my-field-list',
							},
								qFieldListDef: {},
						})
			          	.then(object => object.getLayout())
			          	.then(layout => {
			          		if(debug) console.log('Field list:', JSON.stringify(layout, null, '  '));
			          		var list = "<select class='lui-select' id='grouperNewBinField'>";
			          		list += "<option selected disabled>Select the field to filter on</option>";
			          		layout.qFieldList.qItems.forEach( function ( row ) {
			          			list += "<option value='" + row.qName + "'>" + row.qName + "</option>";
			          		});
			          		list += "</select>";
			          		$("#grouperBtnBin").append(list);

			          		$("#grouperNewBinField").change(function(){
			          			var val = $("#grouperNewBinField option:selected").val();
			          			if(debug) console.log('grouper field selected',val);

								doc.createObject({
								  qInfo: {
								    qType: 'my-list-object',
								  },
								  qListObjectDef: {
								    qDef: {
								      qFieldDefs: [val],
								      "qSortCriterias": [
							            {
							              "qSortByState": 1,
							              "qSortByFrequency": 0,
							              "qSortByNumeric": 0,
							              "qSortByAscii": 1,
							              "qSortByLoadOrder": 0,
							              "qSortByExpression": 0,
							              "qExpression": {
							                "qv": ""
							              }
							            }
							          ]
								    },
								    qShowAlternatives: true,
								    qInitialDataFetch: [{
								      qTop: 0,
								      qHeight: 1000,
								      qLeft: 0,
								      qWidth: 1,
								    }],
								  },
								})
								.then((listObject) => {
									mListObject = listObject;
									listObject.getLayout()
									.then((layout) => {
								        if(debug) console.log('Generic object info:', JSON.stringify(layout.qInfo, null, '  '));
								        if(debug) console.log('List object state:', JSON.stringify(layout.qListObject.qDimensionInfo.qStateCounts, null, '  '));
								        if(debug) console.log('List object data:', JSON.stringify(layout.qListObject.qDataPages[0].qMatrix, null, '  '));

						          		var listbox = "<div id='grouperBinFieldValues' style='overflow: auto; width: 100%'>";
						          		listbox += "<div style='width:50%; display: inline; float: left;'>";
						          		listbox += "<ol id='grouperBinSelect' class='connectedSortable'>";
										listbox += "<li class='ui-state-disabled'>" + $("#grouperNewBinField").find(":selected").text() + "</li>";
										layout.qListObject.qDataPages[0].qMatrix.forEach( function ( row ) {
											listbox += '<li class="data state' + row[0].qState + ' ui-widget-content" data-value="' + row[0].qElemNumber + '">' + row[0].qText;
											listbox += '</li>';
										} );
										listbox += "</ol>";

										listbox += "<label class='lui-checkbox' style='display: inline; float: left; padding: 5px;'>";
										listbox += "<input class='lui-checkbox__input' type='checkbox' name='addOthers' aria-label='addOthers' />";
										listbox += "<div class='lui-checkbox__check-wrap'>";
										listbox += "<span class='lui-checkbox__check'></span>";
										listbox += "<span class='lui-checkbox__check-text'>include others</span>";
										listbox += "</div>";
										listbox += "</label>";

										listbox += "<button class='lui-button' id='createNewBin'>";
										listbox += "<span class='lui-button__icon  lui-icon  lui-icon--plus'></span><span class='lui-button__text'>create master dimension</span>";
										listbox += "</button>";

										listbox += "</div>";

						          		listbox += "<div id='bins' style='width:50%; display: inline; float: right;'>";

						          		var groupBin = "<ol class='grouperBins connectedSortable'>";
										groupBin += "<li class='ui-state-disabled'>";
										groupBin += "<div style='display: table; width: 100%;'>"
										groupBin += "<input type='text' value='New Bin' style='display: inline-block; width: calc(100% - 48px);'>";
										groupBin += "<button class='lui-button removeGroupBin' style='display: inline-block; width: auto;'><span class='lui-button__icon  lui-icon  lui-icon--close'></span></button>";
										groupBin += "</div></li>";
										groupBin += "</ol>";
						          		listbox += groupBin;

										listbox += "</div>";

										listbox += "<button class='lui-button' id='addNewGroupBin'>";
										listbox += "<span class='lui-button__icon  lui-icon  lui-icon--plus'></span><span class='lui-button__text'>add another bin</span>";
										listbox += "</button>";

										listbox += "</div>";

						          		if($("#grouperBinFieldValues").length)
						          			$("#grouperBinFieldValues").replaceWith(listbox);
						          		else
						          			$("#grouperBtnBin").append(listbox);

									    mListObject.on('changed', () => {
									    	mListObject.getLayout().then(layout => {
									    		if(debug) console.log("changed mListObject", JSON.stringify(layout, null, '  '));

												layout.qListObject.qDataPages[0].qMatrix.forEach( function ( row ) {
										    		$("li").filter(function() { return this.innerText === row[0].qText; })
														.removeClass("stateO stateA stateS stateX stateXS")
														.addClass("state"+row[0].qState);
												});
									    	});
									    });

										$("#addNewGroupBin").click(function() {
											$("#bins").append(groupBin);

							          		$( "#grouperBinSelect, .grouperBins" ).sortable({
							          			items: "li:not(.ui-state-disabled)",
										    	connectWith: ".connectedSortable"
										    }).disableSelection();

											$(".removeGroupBin").click(function() {
												if(debug) console.log(this);
												if($("#bins").children().length > 1){
													$(this).parent().parent().parent().remove();
												}
											});
										});

										$(".removeGroupBin").click(function() {
											if(debug) console.log(this);
											if($("#bins").children().length > 1){
												$(this).parent().parent().parent().remove();
											}
										});

						          		$( "#grouperBinSelect, .grouperBins" ).sortable({
						          			items: "li:not(.ui-state-disabled)",
									    	connectWith: ".connectedSortable"
									    }).disableSelection();

								    	var selections = [];
						          		$("#createNewBin").click(function(){

									        $(".grouperBins").each(function(i) {
									        	var ol = this;
							          			var sField = {};
										        $(ol).find("input").each(function() {
										        	if(debug) console.log($(this).val());
										        	sField.name = $(this).val();
										        	selections.push(sField);
									        	});
									        	sVals = [];
										        $(ol).find(".data").each(function() {
										        	if(debug) console.log($(this).text());
										        	sVals.push($(this).text());
										        	selections[i].vals = sVals;
									        	});
									        });
								    		if(debug) console.log(JSON.stringify(selections, null, '  '))

										    for(i=0; i<selections.length;i++){
												if(!selections[i].hasOwnProperty("vals")){
													if(debug) console.log("NO SELECTIONS");
													var error = "Please put at least 1 value in each bin";
													var toast = "<div class='lui-toast' id='grouperToast'><span>" + error + "</span></div>"
													$("#createNewBin").prepend(toast);
													$("#grouperToast").fadeOut(4000);
													setTimeout(function(){$("#grouperToast").remove();},4000);
													return;
												}
											}

											var dimDef = {
										      "qInfo": {
										        "qType": "dimension"
										      },
										      "qDim": {
										        "title": "",
										        "qGrouping": "N",
										        "qFieldDefs": [],
										        "qFieldLabels": []
										      },
										      "qMetaDef": {
										        "title": "",
										        "description": "",
										        "tags": []
										      }
										    };
									    	var ifStmt = "=";
									    	var ctr = 0;
										    for(i=0; i<selections.length;i++){
											    for(j=0; j<selections[i].vals.length;j++){
											    	ifStmt += "if(\"" + val + "\" = '" + selections[i].vals[j] + "', '" + selections[i].name + "'";
											    	if(j<selections[i].vals.length-1){
											    		ifStmt += ",\n";
											    	}
											    	ctr++;
											    }
										    	if(i<selections.length-1){
										    		ifStmt += ",\n";
										    	}
											}
											if($('input[name="addOthers"]').is(':checked'))
												ifStmt += "," + val;
										    for(k=0; k<ctr; k++)
										    	ifStmt += ")";

									    	dimDef.qDim.qFieldDefs.push(ifStmt);
									    	dimDef.qDim.qFieldLabels.push($("#dimName").val());
									    	dimDef.qDim.title = $("#dimName").val();
									    	dimDef.qMetaDef.title = $("#dimName").val();

									    	if(debug) console.log("dimDef",dimDef);

											doc.createDimension(dimDef)
										    .then(result => {
										    	if(debug) console.log(result);
										    	if(result.delta){
										    		$("#grouperBtnBin").children().slice(1).remove();

													var msg = "Your new master dimension (" + $("#dimName").val() + ") has been added";
													var toast = "<div class='lui-toast' id='grouperToast'><span>" + msg + "</span></div>"
													$("#addNewBin").append(toast);
													$("#grouperToast").fadeOut(4000);
													setTimeout(function(){$("#grouperToast").remove();},4000);
													session.close();
										    	}
										    })
						          		});

								    });
								})
			          		});
			          	})
					})
				}).catch(function(err) {
					console.log('Something went wrong', err);
				});
			});

		}
	};

} );

